<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iMuxin&#39;s Blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://www.slicloud.com:38876/"/>
  <updated>2020-03-23T07:18:42.532Z</updated>
  <id>http://www.slicloud.com:38876/</id>
  
  <author>
    <name>imuxin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CPython/Objects/obmalloc.c -- small object memory allocation</title>
    <link href="http://www.slicloud.com:38876/2019/11/14/CPython-Objects-obmalloc-c-small-object-memory-allocation/"/>
    <id>http://www.slicloud.com:38876/2019/11/14/CPython-Objects-obmalloc-c-small-object-memory-allocation/</id>
    <published>2019-11-14T18:33:49.000Z</published>
    <updated>2020-03-23T07:18:42.532Z</updated>
    
    <content type="html"><![CDATA[<p>Here is the abstract of the post.</p><a id="more"></a><h2 id="About-memory"><a href="#About-memory" class="headerlink" title="About memory"></a>About memory</h2><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><ol><li><p>What is size of long unsigned int</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lx\n"</span>, (<span class="keyword">intptr_t</span>)((<span class="keyword">size_t</span>)<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, (<span class="keyword">intptr_t</span>)((<span class="keyword">size_t</span>)<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>, (<span class="keyword">intptr_t</span>)(((<span class="keyword">size_t</span>)<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">PyObject_Malloc(<span class="keyword">size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* see PyMem_RawMalloc() */</span></span><br><span class="line">    <span class="keyword">if</span> (size &gt; (<span class="keyword">size_t</span>)PY_SSIZE_T_MAX)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> _PyObject.<span class="built_in">malloc</span>(_PyObject.ctx, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>call heri</li></ol><p>pymalloc_alloc -&gt; </p><h2 id="Dive-into-source-code"><a href="#Dive-into-source-code" class="headerlink" title="Dive into source code"></a>Dive into source code</h2><ol><li>variables and structs</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The system's VMM page size can be obtained on most unices with a</span></span><br><span class="line"><span class="comment"> * getpagesize() call or deduced from various header files. To make</span></span><br><span class="line"><span class="comment"> * things simpler, we assume that it is 4K, which is OK for most systems.</span></span><br><span class="line"><span class="comment"> * It is probably better if this is the native page size, but it doesn't</span></span><br><span class="line"><span class="comment"> * have to be.  In theory, if SYSTEM_PAGE_SIZE is larger than the native page</span></span><br><span class="line"><span class="comment"> * size, then `POOL_ADDR(p)-&gt;arenaindex' could rarely cause a segmentation</span></span><br><span class="line"><span class="comment"> * violation fault.  4K is apparently OK for all the platforms that python</span></span><br><span class="line"><span class="comment"> * currently targets.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSTEM_PAGE_SIZE        (4 * 1024)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSTEM_PAGE_SIZE_MASK   (SYSTEM_PAGE_SIZE - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Size of the pools used for small blocks. Should be a power of 2,</span></span><br><span class="line"><span class="comment"> * between 1K and SYSTEM_PAGE_SIZE, that is: 1k, 2k, 4k.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POOL_SIZE               SYSTEM_PAGE_SIZE        <span class="comment">/* must be 2^N */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POOL_SIZE_MASK          SYSTEM_PAGE_SIZE_MASK</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_POOLS_IN_ARENA  (ARENA_SIZE / POOL_SIZE)</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* When you say memory, my mind reasons in terms of (pointers to) blocks */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint8_t</span> block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Pool for small blocks. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pool_header</span> &#123;</span></span><br><span class="line">    <span class="keyword">union</span> &#123; block *_padding;</span><br><span class="line">            uint count; &#125; ref;          <span class="comment">/* number of allocated blocks    */</span></span><br><span class="line">    block *freeblock;                   <span class="comment">/* pool's free list head         */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pool_header</span> *<span class="title">nextpool</span>;</span>       <span class="comment">/* next pool of this size class  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pool_header</span> *<span class="title">prevpool</span>;</span>       <span class="comment">/* previous pool       ""        */</span></span><br><span class="line">    uint arenaindex;                    <span class="comment">/* index into arenas of base adr */</span></span><br><span class="line">    uint szidx;                         <span class="comment">/* block size class index        */</span></span><br><span class="line">    uint nextoffset;                    <span class="comment">/* bytes to virgin block         */</span></span><br><span class="line">    uint maxnextoffset;                 <span class="comment">/* largest valid nextoffset      */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* Record keeping for arenas. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">arena_object</span> &#123;</span></span><br><span class="line">    <span class="comment">/* The address of the arena, as returned by malloc.  Note that 0</span></span><br><span class="line"><span class="comment">     * will never be returned by a successful malloc, and is used</span></span><br><span class="line"><span class="comment">     * here to mark an arena_object that doesn't correspond to an</span></span><br><span class="line"><span class="comment">     * allocated arena.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">uintptr_t</span> address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Pool-aligned pointer to the next pool to be carved off. */</span></span><br><span class="line">    block* pool_address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The number of available pools in the arena:  free pools + never-</span></span><br><span class="line"><span class="comment">     * allocated pools.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    uint nfreepools;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The total number of pools in the arena, whether or not available. */</span></span><br><span class="line">    uint ntotalpools;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Singly-linked list of available pools. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pool_header</span>* <span class="title">freepools</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Whenever this arena_object is not associated with an allocated</span></span><br><span class="line"><span class="comment">     * arena, the nextarena member is used to link all unassociated</span></span><br><span class="line"><span class="comment">     * arena_objects in the singly-linked `unused_arena_objects` list.</span></span><br><span class="line"><span class="comment">     * The prevarena member is unused in this case.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * When this arena_object is associated with an allocated arena</span></span><br><span class="line"><span class="comment">     * with at least one available pool, both members are used in the</span></span><br><span class="line"><span class="comment">     * doubly-linked `usable_arenas` list, which is maintained in</span></span><br><span class="line"><span class="comment">     * increasing order of `nfreepools` values.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Else this arena_object is associated with an allocated arena</span></span><br><span class="line"><span class="comment">     * all of whose pools are in use.  `nextarena` and `prevarena`</span></span><br><span class="line"><span class="comment">     * are both meaningless in this case.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">arena_object</span>* <span class="title">nextarena</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">arena_object</span>* <span class="title">prevarena</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Array of objects used to track chunks of memory (arenas). */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">arena_object</span>* <span class="title">arenas</span> = <span class="title">NULL</span>;</span></span><br><span class="line"><span class="comment">/* Number of slots currently allocated in the `arenas` vector. */</span></span><br><span class="line"><span class="keyword">static</span> uint maxarenas = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The head of the singly-linked, NULL-terminated list of available</span></span><br><span class="line"><span class="comment"> * arena_objects.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">arena_object</span>* <span class="title">unused_arena_objects</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The head of the doubly-linked, NULL-terminated at each end, list of</span></span><br><span class="line"><span class="comment"> * arena_objects associated with arenas that have pools available.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">arena_object</span>* <span class="title">usable_arenas</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* nfp2lasta[nfp] is the last arena in usable_arenas with nfp free pools */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">arena_object</span>* <span class="title">nfp2lasta</span>[<span class="title">MAX_POOLS_IN_ARENA</span> + 1] = &#123;</span> <span class="literal">NULL</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* How many arena_objects do we initially allocate?</span></span><br><span class="line"><span class="comment"> * 16 = can allocate 16 arenas = 16 * ARENA_SIZE = 4MB before growing the</span></span><br><span class="line"><span class="comment"> * `arenas` vector.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INITIAL_ARENA_OBJECTS 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Number of arenas allocated that haven't been free()'d. */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">size_t</span> narenas_currently_allocated = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Total number of times malloc() called to allocate an arena. */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">size_t</span> ntimes_arena_allocated = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* High water mark (max value ever seen) for narenas_currently_allocated. */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">size_t</span> narenas_highwater = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>functions</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Allocate a new arena.  If we run out of memory, return NULL.  Else</span></span><br><span class="line"><span class="comment"> * allocate a new arena, and return the address of an arena_object</span></span><br><span class="line"><span class="comment"> * describing the new arena.  It's expected that the caller will set</span></span><br><span class="line"><span class="comment"> * `usable_arenas` to the return value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">arena_object</span>*</span></span><br><span class="line"><span class="class"><span class="title">new_arena</span>(<span class="title">void</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">arena_object</span>* <span class="title">arenaobj</span>;</span></span><br><span class="line">    uint excess;        <span class="comment">/* number of bytes above pool alignment */</span></span><br><span class="line">    <span class="keyword">void</span> *address;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> debug_stats = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (debug_stats == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *opt = Py_GETENV(<span class="string">"PYTHONMALLOCSTATS"</span>);</span><br><span class="line">        debug_stats = (opt != <span class="literal">NULL</span> &amp;&amp; *opt != <span class="string">'\0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (debug_stats)</span><br><span class="line">        _PyObject_DebugMallocStats(<span class="built_in">stderr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (unused_arena_objects == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        uint i;</span><br><span class="line">        uint numarenas;</span><br><span class="line">        <span class="keyword">size_t</span> nbytes;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Double the number of arena objects on each allocation.</span></span><br><span class="line"><span class="comment">         * Note that it's possible for `numarenas` to overflow.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        numarenas = maxarenas ? maxarenas &lt;&lt; <span class="number">1</span> : INITIAL_ARENA_OBJECTS;</span><br><span class="line">        <span class="keyword">if</span> (numarenas &lt;= maxarenas)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;                <span class="comment">/* overflow */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SIZEOF_SIZE_T &lt;= SIZEOF_INT</span></span><br><span class="line">        <span class="keyword">if</span> (numarenas &gt; SIZE_MAX / <span class="keyword">sizeof</span>(*arenas))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;                <span class="comment">/* overflow */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        nbytes = numarenas * <span class="keyword">sizeof</span>(*arenas);</span><br><span class="line">        arenaobj = (struct arena_object *)PyMem_RawRealloc(arenas, nbytes);</span><br><span class="line">        <span class="keyword">if</span> (arenaobj == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        arenas = arenaobj;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* We might need to fix pointers that were copied.  However,</span></span><br><span class="line"><span class="comment">         * new_arena only gets called when all the pages in the</span></span><br><span class="line"><span class="comment">         * previous arenas are full.  Thus, there are *no* pointers</span></span><br><span class="line"><span class="comment">         * into the old array. Thus, we don't have to worry about</span></span><br><span class="line"><span class="comment">         * invalid pointers.  Just to be sure, some asserts:</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        assert(usable_arenas == <span class="literal">NULL</span>);</span><br><span class="line">        assert(unused_arena_objects == <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Put the new arenas on the unused_arena_objects list. */</span></span><br><span class="line">        <span class="keyword">for</span> (i = maxarenas; i &lt; numarenas; ++i) &#123;</span><br><span class="line">            arenas[i].address = <span class="number">0</span>;              <span class="comment">/* mark as unassociated */</span></span><br><span class="line">            arenas[i].nextarena = i &lt; numarenas - <span class="number">1</span> ?</span><br><span class="line">                                   &amp;arenas[i+<span class="number">1</span>] : <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Update globals. */</span></span><br><span class="line">        unused_arena_objects = &amp;arenas[maxarenas];</span><br><span class="line">        maxarenas = numarenas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Take the next available arena object off the head of the list. */</span></span><br><span class="line">    assert(unused_arena_objects != <span class="literal">NULL</span>);</span><br><span class="line">    arenaobj = unused_arena_objects;</span><br><span class="line">    unused_arena_objects = arenaobj-&gt;nextarena;</span><br><span class="line">    assert(arenaobj-&gt;address == <span class="number">0</span>);</span><br><span class="line">    address = _PyObject_Arena.alloc(_PyObject_Arena.ctx, ARENA_SIZE);</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* The allocation failed: return NULL after putting the</span></span><br><span class="line"><span class="comment">         * arenaobj back.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        arenaobj-&gt;nextarena = unused_arena_objects;</span><br><span class="line">        unused_arena_objects = arenaobj;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arenaobj-&gt;address = (<span class="keyword">uintptr_t</span>)address;</span><br><span class="line"></span><br><span class="line">    ++narenas_currently_allocated;</span><br><span class="line">    ++ntimes_arena_allocated;</span><br><span class="line">    <span class="keyword">if</span> (narenas_currently_allocated &gt; narenas_highwater)</span><br><span class="line">        narenas_highwater = narenas_currently_allocated;</span><br><span class="line">    arenaobj-&gt;freepools = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">/* pool_address &lt;- first pool-aligned address in the arena</span></span><br><span class="line"><span class="comment">       nfreepools &lt;- number of whole pools that fit after alignment */</span></span><br><span class="line">    arenaobj-&gt;pool_address = (block*)arenaobj-&gt;address;</span><br><span class="line">    arenaobj-&gt;nfreepools = MAX_POOLS_IN_ARENA;</span><br><span class="line">    excess = (uint)(arenaobj-&gt;address &amp; POOL_SIZE_MASK);</span><br><span class="line">    <span class="keyword">if</span> (excess != <span class="number">0</span>) &#123;</span><br><span class="line">        --arenaobj-&gt;nfreepools;</span><br><span class="line">        arenaobj-&gt;pool_address += POOL_SIZE - excess;</span><br><span class="line">    &#125;</span><br><span class="line">    arenaobj-&gt;ntotalpools = arenaobj-&gt;nfreepools;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arenaobj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* called when pymalloc_alloc can not allocate a block from usedpool.</span></span><br><span class="line"><span class="comment"> * This function takes new pool and allocate a block from it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span>*</span><br><span class="line">allocate_from_new_pool(uint size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* There isn't a pool of the right size class immediately</span></span><br><span class="line"><span class="comment">     * available:  use a free pool.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (UNLIKELY(usable_arenas == <span class="literal">NULL</span>)) &#123;</span><br><span class="line">        <span class="comment">/* No arena has a free pool:  allocate a new arena. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WITH_MEMORY_LIMITS</span></span><br><span class="line">        <span class="keyword">if</span> (narenas_currently_allocated &gt;= MAX_ARENAS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        usable_arenas = new_arena();</span><br><span class="line">        <span class="keyword">if</span> (usable_arenas == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        usable_arenas-&gt;nextarena = usable_arenas-&gt;prevarena = <span class="literal">NULL</span>;</span><br><span class="line">        assert(nfp2lasta[usable_arenas-&gt;nfreepools] == <span class="literal">NULL</span>);</span><br><span class="line">        nfp2lasta[usable_arenas-&gt;nfreepools] = usable_arenas;</span><br><span class="line">    &#125;</span><br><span class="line">    assert(usable_arenas-&gt;address != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This arena already had the smallest nfreepools value, so decreasing</span></span><br><span class="line"><span class="comment">     * nfreepools doesn't change that, and we don't need to rearrange the</span></span><br><span class="line"><span class="comment">     * usable_arenas list.  However, if the arena becomes wholly allocated,</span></span><br><span class="line"><span class="comment">     * we need to remove its arena_object from usable_arenas.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    assert(usable_arenas-&gt;nfreepools &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (nfp2lasta[usable_arenas-&gt;nfreepools] == usable_arenas) &#123;</span><br><span class="line">        <span class="comment">/* It's the last of this size, so there won't be any. */</span></span><br><span class="line">        nfp2lasta[usable_arenas-&gt;nfreepools] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* If any free pools will remain, it will be the new smallest. */</span></span><br><span class="line">    <span class="keyword">if</span> (usable_arenas-&gt;nfreepools &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        assert(nfp2lasta[usable_arenas-&gt;nfreepools - <span class="number">1</span>] == <span class="literal">NULL</span>);</span><br><span class="line">        nfp2lasta[usable_arenas-&gt;nfreepools - <span class="number">1</span>] = usable_arenas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Try to get a cached free pool. */</span></span><br><span class="line">    poolp pool = usable_arenas-&gt;freepools;</span><br><span class="line">    <span class="keyword">if</span> (LIKELY(pool != <span class="literal">NULL</span>)) &#123;</span><br><span class="line">        <span class="comment">/* Unlink from cached pools. */</span></span><br><span class="line">        usable_arenas-&gt;freepools = pool-&gt;nextpool;</span><br><span class="line">        usable_arenas-&gt;nfreepools--;</span><br><span class="line">        <span class="keyword">if</span> (UNLIKELY(usable_arenas-&gt;nfreepools == <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">/* Wholly allocated:  remove. */</span></span><br><span class="line">            assert(usable_arenas-&gt;freepools == <span class="literal">NULL</span>);</span><br><span class="line">            assert(usable_arenas-&gt;nextarena == <span class="literal">NULL</span> ||</span><br><span class="line">                   usable_arenas-&gt;nextarena-&gt;prevarena ==</span><br><span class="line">                   usable_arenas);</span><br><span class="line">            usable_arenas = usable_arenas-&gt;nextarena;</span><br><span class="line">            <span class="keyword">if</span> (usable_arenas != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                usable_arenas-&gt;prevarena = <span class="literal">NULL</span>;</span><br><span class="line">                assert(usable_arenas-&gt;address != <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* nfreepools &gt; 0:  it must be that freepools</span></span><br><span class="line"><span class="comment">             * isn't NULL, or that we haven't yet carved</span></span><br><span class="line"><span class="comment">             * off all the arena's pools for the first</span></span><br><span class="line"><span class="comment">             * time.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            assert(usable_arenas-&gt;freepools != <span class="literal">NULL</span> ||</span><br><span class="line">                   usable_arenas-&gt;pool_address &lt;=</span><br><span class="line">                   (block*)usable_arenas-&gt;address +</span><br><span class="line">                       ARENA_SIZE - POOL_SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Carve off a new pool. */</span></span><br><span class="line">        assert(usable_arenas-&gt;nfreepools &gt; <span class="number">0</span>);</span><br><span class="line">        assert(usable_arenas-&gt;freepools == <span class="literal">NULL</span>);</span><br><span class="line">        pool = (poolp)usable_arenas-&gt;pool_address;</span><br><span class="line">        assert((block*)pool &lt;= (block*)usable_arenas-&gt;address +</span><br><span class="line">                                 ARENA_SIZE - POOL_SIZE);</span><br><span class="line">        pool-&gt;arenaindex = (uint)(usable_arenas - arenas);</span><br><span class="line">        assert(&amp;arenas[pool-&gt;arenaindex] == usable_arenas);</span><br><span class="line">        pool-&gt;szidx = DUMMY_SIZE_IDX;</span><br><span class="line">        usable_arenas-&gt;pool_address += POOL_SIZE;</span><br><span class="line">        --usable_arenas-&gt;nfreepools;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (usable_arenas-&gt;nfreepools == <span class="number">0</span>) &#123;</span><br><span class="line">            assert(usable_arenas-&gt;nextarena == <span class="literal">NULL</span> ||</span><br><span class="line">                   usable_arenas-&gt;nextarena-&gt;prevarena ==</span><br><span class="line">                   usable_arenas);</span><br><span class="line">            <span class="comment">/* Unlink the arena:  it is completely allocated. */</span></span><br><span class="line">            usable_arenas = usable_arenas-&gt;nextarena;</span><br><span class="line">            <span class="keyword">if</span> (usable_arenas != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                usable_arenas-&gt;prevarena = <span class="literal">NULL</span>;</span><br><span class="line">                assert(usable_arenas-&gt;address != <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Frontlink to used pools. */</span></span><br><span class="line">    block *bp;</span><br><span class="line">    poolp next = usedpools[size + size]; <span class="comment">/* == prev */</span></span><br><span class="line">    pool-&gt;nextpool = next;</span><br><span class="line">    pool-&gt;prevpool = next;</span><br><span class="line">    next-&gt;nextpool = pool;</span><br><span class="line">    next-&gt;prevpool = pool;</span><br><span class="line">    pool-&gt;ref.count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pool-&gt;szidx == size) &#123;</span><br><span class="line">        <span class="comment">/* Luckily, this pool last contained blocks</span></span><br><span class="line"><span class="comment">         * of the same size class, so its header</span></span><br><span class="line"><span class="comment">         * and free list are already initialized.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        bp = pool-&gt;freeblock;</span><br><span class="line">        assert(bp != <span class="literal">NULL</span>);</span><br><span class="line">        pool-&gt;freeblock = *(block **)bp;</span><br><span class="line">        <span class="keyword">return</span> bp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Initialize the pool header, set up the free list to</span></span><br><span class="line"><span class="comment">     * contain just the second block, and return the first</span></span><br><span class="line"><span class="comment">     * block.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    pool-&gt;szidx = size;</span><br><span class="line">    size = INDEX2SIZE(size);</span><br><span class="line">    bp = (block *)pool + POOL_OVERHEAD;</span><br><span class="line">    pool-&gt;nextoffset = POOL_OVERHEAD + (size &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    pool-&gt;maxnextoffset = POOL_SIZE - size;</span><br><span class="line">    pool-&gt;freeblock = bp + size;</span><br><span class="line">    *(block **)(pool-&gt;freeblock) = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> bp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* pymalloc allocator</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   Return a pointer to newly allocated memory if pymalloc allocated memory.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   Return NULL if pymalloc failed to allocate the memory block: on bigger</span></span><br><span class="line"><span class="comment">   requests, on error in the code below (as a last chance to serve the request)</span></span><br><span class="line"><span class="comment">   or when the max memory limit has been reached.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span>*</span><br><span class="line">pymalloc_alloc(<span class="keyword">void</span> *ctx, <span class="keyword">size_t</span> nbytes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WITH_VALGRIND</span></span><br><span class="line">    <span class="keyword">if</span> (UNLIKELY(running_on_valgrind == <span class="number">-1</span>)) &#123;</span><br><span class="line">        running_on_valgrind = RUNNING_ON_VALGRIND;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (UNLIKELY(running_on_valgrind)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (UNLIKELY(nbytes == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (UNLIKELY(nbytes &gt; SMALL_REQUEST_THRESHOLD)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uint size = (uint)(nbytes - <span class="number">1</span>) &gt;&gt; ALIGNMENT_SHIFT;</span><br><span class="line">    poolp pool = usedpools[size + size];</span><br><span class="line">    block *bp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (LIKELY(pool != pool-&gt;nextpool)) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * There is a used pool for this size class.</span></span><br><span class="line"><span class="comment">         * Pick up the head block of its free list.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ++pool-&gt;ref.count;</span><br><span class="line">        bp = pool-&gt;freeblock;</span><br><span class="line">        assert(bp != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (UNLIKELY((pool-&gt;freeblock = *(block **)bp) == <span class="literal">NULL</span>)) &#123;</span><br><span class="line">            <span class="comment">// Reached the end of the free list, try to extend it.</span></span><br><span class="line">            pymalloc_pool_extend(pool, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* There isn't a pool of the right size class immediately</span></span><br><span class="line"><span class="comment">         * available:  use a free pool.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        bp = allocate_from_new_pool(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)bp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> *</span><br><span class="line">_PyObject_Malloc(<span class="keyword">void</span> *ctx, <span class="keyword">size_t</span> nbytes)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span>* ptr = pymalloc_alloc(ctx, nbytes);</span><br><span class="line">    <span class="keyword">if</span> (LIKELY(ptr != <span class="literal">NULL</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ptr = PyMem_RawMalloc(nbytes);</span><br><span class="line">    <span class="keyword">if</span> (ptr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        raw_allocated_blocks++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the abstract of the post.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Web IDE</title>
    <link href="http://www.slicloud.com:38876/2019/11/07/Web-IDE/"/>
    <id>http://www.slicloud.com:38876/2019/11/07/Web-IDE/</id>
    <published>2019-11-07T13:02:19.000Z</published>
    <updated>2020-03-23T07:18:42.532Z</updated>
    
    <content type="html"><![CDATA[<p>Here is the abstract of the post.</p><a id="more"></a><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://news.ycombinator.com/item?id=17321921" target="_blank" rel="noopener">https://news.ycombinator.com/item?id=17321921</a></li><li><a href="https://github.com/styfle/awesome-online-ide" target="_blank" rel="noopener">https://github.com/styfle/awesome-online-ide</a></li><li><a href="https://c9.github.io/core/" target="_blank" rel="noopener">https://c9.github.io/core/</a></li><li><a href="https://repl.it/" target="_blank" rel="noopener">https://repl.it/</a></li><li><a href="https://github.com/eclipse-theia/theia" target="_blank" rel="noopener">https://github.com/eclipse-theia/theia</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the abstract of the post.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Dive into WebAssembly (WASM)</title>
    <link href="http://www.slicloud.com:38876/2019/11/01/Dive-into-WebAssembly-WASM/"/>
    <id>http://www.slicloud.com:38876/2019/11/01/Dive-into-WebAssembly-WASM/</id>
    <published>2019-11-01T16:41:38.000Z</published>
    <updated>2020-03-23T07:18:42.532Z</updated>
    
    <content type="html"><![CDATA[<p>WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.<br><img src="/blog/2019/11/01/Dive-into-WebAssembly-WASM/overview.png" alt="img: overview; from: https://hacks.mozilla.org/2019/08/webassembly-interface-types/"></p><a id="more"></a><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li>Official website <a href="https://webassembly.org/" target="_blank" rel="noopener">https://webassembly.org/</a></li><li>Awesome Wasm <a href="https://github.com/mbasso/awesome-wasm" target="_blank" rel="noopener">https://github.com/mbasso/awesome-wasm</a></li><li>WebAssembly Explorer <a href="https://mbebenita.github.io/WasmExplorer/" target="_blank" rel="noopener">https://mbebenita.github.io/WasmExplorer/</a></li><li>7 Things You Should Know About WebAssembly <a href="https://auth0.com/blog/7-things-you-should-know-about-web-assembly/" target="_blank" rel="noopener">https://auth0.com/blog/7-things-you-should-know-about-web-assembly/</a></li><li>golang &amp;&amp; wasm <a href="https://github.com/golang/go/wiki/WebAssembly" target="_blank" rel="noopener">https://github.com/golang/go/wiki/WebAssembly</a></li><li>rust &amp;&amp; wasm <a href="https://rustwasm.github.io/book/" target="_blank" rel="noopener">https://rustwasm.github.io/book/</a></li><li>WASM Weekly <a href="https://wasmweekly.news" target="_blank" rel="noopener">https://wasmweekly.news</a></li><li>Rust, WebAssembly, and the future of Serverless by Steve Klabnik <a href="https://www.youtube.com/watch?v=CMB6AlE1QuI&amp;feature=youtu.be" target="_blank" rel="noopener">https://www.youtube.com/watch?v=CMB6AlE1QuI&amp;feature=youtu.be</a></li><li>WebAssembly Literacy <a href="http://pop.frontendweekly.co/W2Q9ho" target="_blank" rel="noopener">http://pop.frontendweekly.co/W2Q9ho</a></li><li>WebAssembly Interface Types: Interoperate with All the Things! <a href="https://hacks.mozilla.org/2019/08/webassembly-interface-types/" target="_blank" rel="noopener">https://hacks.mozilla.org/2019/08/webassembly-interface-types/</a></li><li>compiling python to webassembly <a href="https://stackoverflow.com/questions/44761748/compiling-python-to-webassembly" target="_blank" rel="noopener">https://stackoverflow.com/questions/44761748/compiling-python-to-webassembly</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.&lt;br&gt;&lt;img src=&quot;/blog/2019/11/01/Dive-into-WebAssembly-WASM/overview.png&quot; alt=&quot;img: overview; from: https://hacks.mozilla.org/2019/08/webassembly-interface-types/&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Climb Climb Climb</title>
    <link href="http://www.slicloud.com:38876/2019/10/29/climb-climb-climb/"/>
    <id>http://www.slicloud.com:38876/2019/10/29/climb-climb-climb/</id>
    <published>2019-10-29T23:30:19.000Z</published>
    <updated>2020-03-23T07:18:42.532Z</updated>
    
    <content type="html"><![CDATA[<p>This guide is a step by step turotial for building a <code>ladder</code>. Hope this guide helpful to you.</p><p><img src="/blog/2019/10/29/climb-climb-climb/climb_the_wall.png" alt="Climb the wall"></p><a id="more"></a><h2 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><div class="tip">Before building your own ladder, the following prerequisites needed.<ol><li>A foreign <code>vps server</code> which can visit google.com is enough.</li><li><code>Docker</code> has been installed on the vps os.</li></ol></div><h2 id="Server-Side-How-to-build-a-vpn-server"><a href="#Server-Side-How-to-build-a-vpn-server" class="headerlink" title="[Server Side] How to build a vpn server"></a>[Server Side] How to build a vpn server</h2><h3 id="IPsec-VPN-Server-on-Docker"><a href="#IPsec-VPN-Server-on-Docker" class="headerlink" title="IPsec VPN Server on Docker"></a>IPsec VPN Server on Docker</h3><p>Docker image to run an IPsec VPN server, with both IPsec/L2TP and Cisco IPsec.</p><ol><li><p>Pull the latest docker image</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker pull hwdsl2/ipsec-vpn-server</span><br></pre></td></tr></table></figure></li><li><p>hwdsl2/ipsec-vpn-server <strong>instructions</strong></p><ul><li><p>Environment variables</p><p>This Docker image uses the following variables, that can be declared in an env file (example):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VPN_IPSEC_PSK=your_ipsec_pre_shared_key</span><br><span class="line">VPN_USER=your_vpn_username</span><br><span class="line">VPN_PASSWORD=your_vpn_password</span><br></pre></td></tr></table></figure></li><li><p>Start the IPsec VPN server</p><p>Create a new Docker container from this image (replace ./vpn.env with your own env file):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --name ipsec-vpn-server \</span><br><span class="line">    --env-file ./vpn.env \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -p 500:500/udp \</span><br><span class="line">    -p 4500:4500/udp \</span><br><span class="line">    -d --privileged \</span><br><span class="line">    hwdsl2/ipsec-vpn-server</span><br></pre></td></tr></table></figure></li><li><p>Retrieve VPN login details</p><p>If you did not specify an env file in the docker run command above, VPN_USER will default to vpnuser and both VPN_IPSEC_PSK and VPN_PASSWORD will be randomly generated. To retrieve them, view the container logs:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker logs ipsec-vpn-server</span><br></pre></td></tr></table></figure><p>Search for these lines in the output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Connect to your new VPN with these details:</span><br><span class="line"></span><br><span class="line">Server IP: your_vpn_server_ip</span><br><span class="line">IPsec PSK: your_ipsec_pre_shared_key</span><br><span class="line">Username: your_vpn_username</span><br><span class="line">Password: your_vpn_password</span><br></pre></td></tr></table></figure></li><li><p>Check server status</p><p>To check the status of your IPsec VPN server, you can pass ipsec status to your container like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker <span class="built_in">exec</span> -it ipsec-vpn-server ipsec status</span><br></pre></td></tr></table></figure><p>Or display current established VPN connections:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker <span class="built_in">exec</span> -it ipsec-vpn-server ipsec whack --trafficstatus</span><br></pre></td></tr></table></figure></li><li><p>Update Docker image</p><p>To update your Docker image and container, follow these steps:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker pull hwdsl2/ipsec-vpn-server</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://github.com/hwdsl2/docker-ipsec-vpn-server" target="_blank" rel="noopener">More Details…</a></p></li><li><p>Sample</p><p><img src="ipsec-vpn-server-sample.png" alt="img: ipsec-vpn-server sample"></p></li></ol><h2 id="Client-Side-How-to-connect-to-the-vpn-server"><a href="#Client-Side-How-to-connect-to-the-vpn-server" class="headerlink" title="[Client Side] How to connect to the vpn server"></a>[Client Side] How to connect to the vpn server</h2><h3 id="On-macOS"><a href="#On-macOS" class="headerlink" title="On macOS"></a>On macOS</h3><p>All things are going to be easy on macOS, because you don’t need to prepare anything, like installing softwares, etc. Let’s enjoy the tour.</p><ol><li><p>Turn on your mac and open network preference. Click the <code>&#39;+&#39;</code> button on the lower left corner of network manager window. Select ‘VPN’ interface, ‘L2TP over IPSec’ vpn type and name your vpn connection.<br><img src="VPN-creation.png" alt="img: vpn creation"></p></li><li><p>VPN server configuration, fill in the blank of <strong>vpn server address</strong> and your <strong>acount name</strong>.<br><img src="Server-config.png" alt="img: server and acount configuration"></p></li><li><p>Authentication info configuration, fill in your vpn server’s <strong>share secret</strong> and account’s <strong>password</strong>.<br><img src="Authentication-config.png" alt="img: authentication info configuration"></p></li><li><p>Ensure all traffic over this vpn connection.<br><img src="Enable-all-traffic-over--vpn-connection.png" alt="img: Ensure all traffic over vpn connection"></p></li></ol><h3 id="On-manjaro-Linux"><a href="#On-manjaro-Linux" class="headerlink" title="On manjaro Linux"></a>On manjaro Linux</h3><div class="tip warn">Environment:<ul><li>OS: <a href="https://osdn.net/dl/manjaro/manjaro-gnome-18.1.0-stable-minimal-x86_64.iso" target="_blank" rel="noopener">manjaro-gnome-18.1.0-stable-minimal-x86_64</a></li></ul></div><div class="tip">Ensure the <code>base-devel</code> package group is installed in full, you can use this command to install.<a href="https://wiki.archlinux.org/index.php/Arch_User_Repository" target="_blank" rel="noopener"> More details</a>.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -S --needed base-devel</span><br></pre></td></tr></table></figure></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/workspace/arch/ &amp;&amp; <span class="built_in">cd</span> ~/workspace/arch/</span><br><span class="line">$ git <span class="built_in">clone</span> https://aur.archlinux.org/networkmanager-l2tp.git &amp;&amp; <span class="built_in">cd</span> networkmanager-l2tp</span><br><span class="line">$ makepkg -sri <span class="comment"># arch command to install networkmanager-l2tp</span></span><br><span class="line">$ sudo pacman -S strongswan <span class="comment"># to solve that the IPsec config button is shadow</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://aur.archlinux.org/packages/networkmanager-l2tp/" target="_blank" rel="noopener">https://aur.archlinux.org/packages/networkmanager-l2tp/</a></li><li><strong>manjaro l2tp vpn proposal</strong>, <a href="https://forum.manjaro.org/t/solved-using-l2tp-for-vpn/35133" target="_blank" rel="noopener">https://forum.manjaro.org/t/solved-using-l2tp-for-vpn/35133</a><blockquote><p><img src="solve_ipsec_button_is_shadow.png" alt="img: to solve that the IPsec config button is shadow"></p></blockquote></li><li><a href="https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients.md" target="_blank" rel="noopener">https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients.md</a></li><li><a href="https://wiki.archlinux.org/index.php/Arch_User_Repository" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Arch_User_Repository</a></li><li><a href="https://github.com/hwdsl2/docker-ipsec-vpn-server" target="_blank" rel="noopener">https://github.com/hwdsl2/docker-ipsec-vpn-server</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This guide is a step by step turotial for building a &lt;code&gt;ladder&lt;/code&gt;. Hope this guide helpful to you.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/2019/10/29/climb-climb-climb/climb_the_wall.png&quot; alt=&quot;Climb the wall&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>OAuth2.0 and OpenID Connect</title>
    <link href="http://www.slicloud.com:38876/2019/10/28/OAuth2-0-and-OpenID-Connect/"/>
    <id>http://www.slicloud.com:38876/2019/10/28/OAuth2-0-and-OpenID-Connect/</id>
    <published>2019-10-28T12:33:43.000Z</published>
    <updated>2020-03-23T07:18:42.532Z</updated>
    
    <content type="html"><![CDATA[<p>Here is the abstract of the post.</p><a id="more"></a><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener">The OAuth 2.0 Authorization Framework</a></li><li><a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener">JSON Web Token (JWT)</a></li><li><a href="https://tools.ietf.org/html/rfc7515" target="_blank" rel="noopener">JSON Web Signature (JWS)</a></li><li><a href="https://tools.ietf.org/html/rfc7516" target="_blank" rel="noopener">JSON Web Encryption (JWE)</a></li><li><a href="https://pyjwt.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">Welcome to PyJWT</a></li><li><a href="https://www.ory.sh/docs/hydra/oauth2#openid-connect" target="_blank" rel="noopener">[Hydra] OAuth 2.0 and OpenID Connect</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the abstract of the post.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Deploy Kubernetes on Ubuntu 18.04 LTS by kubeadm</title>
    <link href="http://www.slicloud.com:38876/2019/10/16/Deploy-Kubernetes-by-kubeadm/"/>
    <id>http://www.slicloud.com:38876/2019/10/16/Deploy-Kubernetes-by-kubeadm/</id>
    <published>2019-10-16T17:06:19.000Z</published>
    <updated>2020-03-23T07:18:42.532Z</updated>
    
    <content type="html"><![CDATA[<p>Here is the abstract of the post.</p><a id="more"></a><div class="tip warn">The installation is based on <a href="https://ubuntu.com/download/server/thank-you?country=CN&version=18.04.3&architecture=amd64" target="_blank" rel="noopener">ubuntu 18.04 LTS</a>.</div><h2 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><ol><li><p>Install <code>docker</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install docker.io -y</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p><strong>Ref:</strong> Another official installation <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">docs</a>.</p></li><li><p>Install <code>kubeadm</code>, <code>kubectl</code> and <code>kubelet</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line"><span class="comment"># kubeadm及kubernetes组件安装源</span></span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install -y kubelet kubeadm kubectl</span><br><span class="line">$ sudo apt-mark hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure></li><li><p>Disable swap memory (if running) on both the nodes</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo swapoff -a</span><br></pre></td></tr></table></figure></li><li><p>Give unique hostnames to each node</p><ul><li><p>Run the command on the <strong>master</strong> node:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo hostnamectl <span class="built_in">set</span>-hostname master-node</span><br></pre></td></tr></table></figure></li><li><p>Run the command on the <strong>worker</strong> node:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo hostnamectl <span class="built_in">set</span>-hostname worker-node</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Configure <a href="https://www.slicloud.com:8900/">myself’s docker image registry</a><br>Cause my site’s certificate is signed by unknown authority. I need to make the machines trust this certificate. Please read the docker’s <a href="https://docs.docker.com/engine/security/certificates/" target="_blank" rel="noopener">reference</a> before pull or push any images from the harbor without authority.</p><p>The following illustrates a configuration with custom certificates:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/certs.d/        &lt;-- Certificate directory</span><br><span class="line">└── www.slicloud.com:8900/  &lt;-- Hostname:port</span><br><span class="line">   ├── client.cert          &lt;-- Client certificate</span><br><span class="line">   ├── client.key           &lt;-- Client key</span><br><span class="line">   └── ca.crt               &lt;-- Certificate authority that signed</span><br><span class="line">                                the registry certificate</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">   $ sudo mkdir -p /etc/docker/certs.d/www.slicloud.com:8900</span><br><span class="line">   $ <span class="built_in">cd</span> /etc/docker/certs.d/www.slicloud.com:8900/</span><br><span class="line">   $ sudo openssl genrsa -out client.key 4096</span><br><span class="line">   $ sudo openssl req -new -x509 -text -key client.key -out client.cert</span><br><span class="line">   $ sudo cat &lt;&lt;EOF &gt;/etc/docker/certs.d/www.slicloud.com:8900/ca.crt</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIF6DCCA9CgAwIBAgIJAOjOU71I7MvuMA0GCSqGSIb3DQEBDQUAMG8xCzAJBgNV</span><br><span class="line">BAYTAlRXMQ8wDQYDVQQIDAZUYWlwZWkxDzANBgNVBAcMBlRhaXBlaTEQMA4GA1UE</span><br><span class="line">CgwHZXhhbXBsZTERMA8GA1UECwwIUGVyc29uYWwxGTAXBgNVBAMMEHd3dy5zbGlj</span><br><span class="line">bG91ZC5jb20wHhcNMTkxMDE2MDc0MjU5WhcNMjkxMDEzMDc0MjU5WjBvMQswCQYD</span><br><span class="line">VQQGEwJUVzEPMA0GA1UECAwGVGFpcGVpMQ8wDQYDVQQHDAZUYWlwZWkxEDAOBgNV</span><br><span class="line">BAoMB2V4YW1wbGUxETAPBgNVBAsMCFBlcnNvbmFsMRkwFwYDVQQDDBB3d3cuc2xp</span><br><span class="line">Y2xvdWQuY29tMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA1T/Pa5/7</span><br><span class="line">qLMN0ITqTMbQpW9N59oRWcQLZtcQAwAOBrBvo3FqEPIQANJIBlIk3Xj/igItEsTz</span><br><span class="line">Ki5IJnsga1VP9c6QQo3vWmG2A7QTQm1s8qguAsVHcDTZk5prN65ocXAxvfFjvaEj</span><br><span class="line">vxtPF/OTxI6gTwIznV86ifpypYfd8FFyk2/hJ1OmTp8Co7VpbiIAQph+T2ntzwmW</span><br><span class="line">8aCbyYnws5enchoiGCNv6HVKgxs4T6xaInD49dULugVI/XzvEoDkPNvPRPA5LUof</span><br><span class="line">IfjH5MP4WwzCRXdKssCGAT9htsWY5gIvzxKbM0x4dA79S5AFjpSvzqsltR2pG3gK</span><br><span class="line">58Vw+GCIcQt/2LQkO2saLL2yJe0d0nz+NUOFZS7VW1z6QzMxUUMUq3aGEg1D753c</span><br><span class="line">aDI7WFoTp45q+mY6ji2TnTJRW/QnlfAOo/28NIQ8Kv/BsGc1CWMNRPYkMlQjA/WU</span><br><span class="line">4Adig6sxmesoe0iFrSLhNqaWHO5HLB95jf1j0ZJe/HiVkVTjy9C5fLe9AXK0fm4H</span><br><span class="line">L4iKYANkLcWhCRUUCtUO7hKjScSLR+qK8Xcg4ciClxF6hP1y/zXOCDna4wjNjNxS</span><br><span class="line">omENkicg6Gsx9JCAafh80+fHzR+xJICB731pRlLMfpn7lxuE4GH30yLwvhIxS3zc</span><br><span class="line">4PYeXiCC/WeFtTaoDgrEjT1Ol7wVz8Wdx0UCAwEAAaOBhjCBgzAfBgNVHSMEGDAW</span><br><span class="line">gBSLRGPBwjHXVxWp6ZblMFkHx4Zt0zAJBgNVHRMEAjAAMAsGA1UdDwQEAwIE8DAT</span><br><span class="line">BgNVHSUEDDAKBggrBgEFBQcDATAzBgNVHREELDAqghB3d3cuc2xpY2xvdWQuY29t</span><br><span class="line">gghzbGljbG91ZIIMc2xpY2xvdWQuY29tMA0GCSqGSIb3DQEBDQUAA4ICAQAhm4qD</span><br><span class="line">oEvmrscVusNTwYC8yEpybUK2bJqYH2ODiS1r12PCVz2v02aC+F7sAu92ytpVGtOJ</span><br><span class="line">N5sP1BXPfzkJPPQdwN2mEkDNlPH3akc8dzdfxodhRDGYSs95Yyg9D9HU/WKYpDhX</span><br><span class="line">XCZNaIkFxft6tHdYlRdcexfN9ttd0n3PoVqdhcnIi2FXtMJwd7d/cwscmlaK9hne</span><br><span class="line">X26/bQC8Rmn2YVw4B9EQ1jvB1K1VprwGKdMczM2yqrBgThYCfNdD8xa8PExpDCLg</span><br><span class="line">lQB3I9w4bG2pWkr0d0l5C2oINy3JqT8Bf31EXQALcY18tFfDWLazSwYoPjKioFSA</span><br><span class="line">5ACe0ZxD7V25Tlct5iHVoAMNbOJ8Mer5W0H9XkMXA8ojiMosEYT6nQ4Z4UPg+hnX</span><br><span class="line">e2tAJS7xGpvUPR0rxbaUfA3uKTacFkEGCBM8di4VBCrhajy66ujKXHImdmPBRm0u</span><br><span class="line">BxebOQ0cbIILdyu5f8vjQaz2KWQiBlMHIIlqoxaXwqjnq+9vDCK7GcTZ+0QNBWLA</span><br><span class="line">3gvu+n4V28k/HFKxWeC6i1sN4KynstgF791QX232qrdZkkajtf3hrcVRww4r2qqq</span><br><span class="line">JBgM/hcPrFfK6Eb4wNXi8QzdcEGNQCRRKTqNY3PnPW034G9wDC0fIuSSv5R8GLJw</span><br><span class="line">emHljWn5zEhABJF3j4f2iLEhQfKCHEtjx9Egaw==</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ol><h2 id="Kubernetes-Installation"><a href="#Kubernetes-Installation" class="headerlink" title="Kubernetes Installation"></a>Kubernetes Installation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo kubeadm init --image-repository=www.slicloud.com:8900/kubernetes --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">$ sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h2 id="Verify"><a href="#Verify" class="headerlink" title="Verify"></a>Verify</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://vitux.com/install-and-deploy-kubernetes-on-ubuntu/" target="_blank" rel="noopener">Install and Deploy Kubernetes on Ubuntu 18.04 LTS</a></li><li><a href="https://jimmysong.io/kubernetes-handbook/practice/install-kubernetes-on-ubuntu-server-16.04-with-kubeadm.html" target="_blank" rel="noopener">用kubeadm在Ubuntu上快速构建Kubernetes测试集群</a></li><li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">Installing kubeadm</a></li><li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/" target="_blank" rel="noopener">Creating a single control-plane cluster with kubeadm</a></li><li><a href="https://www.slicloud.com:8900">Myself’s Harbor</a></li><li><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/" target="_blank" rel="noopener">kubeadm init</a></li><li><a href="https://billing.hostens.com/clientarea/" target="_blank" rel="noopener">Vps</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the abstract of the post.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Contribute</title>
    <link href="http://www.slicloud.com:38876/2019/09/29/contribute/"/>
    <id>http://www.slicloud.com:38876/2019/09/29/contribute/</id>
    <published>2019-09-29T12:11:11.000Z</published>
    <updated>2020-03-23T07:18:42.552Z</updated>
    
    <content type="html"><![CDATA[<p>This guide is a comprehensive resource for contribute to <a href="https://github.com/imuxin/blog" target="_blank" rel="noopener">imuxin’s blog</a> - for both new and experienced contributors. If you got any good ideas, I welcome your contributions to this blog.</p><a id="more"></a><h2 id="Quick-Reference"><a href="#Quick-Reference" class="headerlink" title="Quick Reference"></a>Quick Reference</h2><p>Here are the basic steps needed to get set up and contribute a patch. This is meant as a checklist, once you know the basics. For complete instructions please see the about page.</p><ol><li><p>Install and set up <code>git</code> and other dependencies (see the about page for detailed information).</p></li><li><p>Fork the <a href="https://github.com/imuxin/blog" target="_blank" rel="noopener">imuxin’s blog</a> repository to your GitHub account and get the source code using.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/&lt;your_username&gt;/blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure></li><li><p>Install project node denpendencies:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li><p>Run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run start</span><br></pre></td></tr></table></figure></li><li><p>Browser the website <a href="http://localhost:4000/blog" target="_blank" rel="noopener"><code>http://localhost:4000/blog</code></a> to check the blog.</p></li></ol><h2 id="Create-Your-Post"><a href="#Create-Your-Post" class="headerlink" title="Create Your Post"></a>Create Your Post</h2><p>I recommend to use <a href="https://www.markdownguide.org/cheat-sheet/" target="_blank" rel="noopener">markdown</a> to write the post, and all the site’s posts are using markdown. Next, I will show you how to create your post. Let’s dive into the details.</p><ol><li><p>Use <code>hexo</code> command to create post:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &lt;your_post_title_name&gt;</span><br></pre></td></tr></table></figure><p>After the command executed sucessfully, you can see <your_post_title_name>.md and the same name folder under the path <code>/source/_posts/</code>. Edit your post content in the markdown file, <your_post_title_name>.md, and once image or other file needed, put them under the same name folder as the post.</your_post_title_name></your_post_title_name></p></li><li><p>Create commit and push it.</p><div class="tip warn">Before you create commit, you need to generate static files first by using the following command.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run docs</span><br></pre></td></tr></table></figure></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add . &amp;&amp; git commit -m <span class="string">'Add a new post, &lt;your_post_title_name&gt;'</span></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>Create pull request to the <a href="https://github.com/imuxin/blog" target="_blank" rel="noopener">origin repository</a>. This is a basic usage of GitHub, I will not show the details.</p><div class="tip">I wish you do sync step to make your repository is the latest to the origin repository.</div></li></ol><p>Good Luck!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This guide is a comprehensive resource for contribute to &lt;a href=&quot;https://github.com/imuxin/blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;imuxin’s blog&lt;/a&gt; - for both new and experienced contributors. If you got any good ideas, I welcome your contributions to this blog.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>About</title>
    <link href="http://www.slicloud.com:38876/2019/09/15/About/"/>
    <id>http://www.slicloud.com:38876/2019/09/15/About/</id>
    <published>2019-09-15T14:49:13.000Z</published>
    <updated>2020-03-23T07:18:42.528Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="/blog/">iMuxin’s Blog</a>! This is a fantastic awesome place where you can gain our computing experience conclusion and of course you could share your great thing with us by posting to the <a href="https://github.com/imuxin/blog" target="_blank" rel="noopener">repository</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h3><p>You need <code>git</code>, <code>node</code> installed on your operation system. Here, I will not give the documentation of installation. I believe that You can achieve the installation by yourself.</p><div class="tip info">    The website is powered by <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>. Hexo is a fast, simple and powerful blog framework. You could get some more detail from the Hexo <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a>, if you want to be an expert. If you encounter any problems when using Hexo, have a look at the <a href="https://hexo.io/docs/troubleshooting" target="_blank" rel="noopener">troubleshooting guide</a>.</div><h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="Clone-the-project-and-install-requirements"><a href="#Clone-the-project-and-install-requirements" class="headerlink" title="Clone the project and install requirements"></a>Clone the project and install requirements</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/imuxin/blog.git</span><br><span class="line">$ <span class="built_in">cd</span> blog &amp;&amp; npm install</span><br></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run start</span><br></pre></td></tr></table></figure><blockquote><p>The command running result will be like this: <img src="cmd_hexo_server.png" alt="cmd_hexo_server"></p></blockquote><blockquote><p>The result in the browser: <img src="home.png" alt="home"></p></blockquote><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Hexo Server</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;/blog/&quot;&gt;iMuxin’s Blog&lt;/a&gt;! This is a fantastic awesome place where you can gain our computing experience conclusion and of course you could share your great thing with us by posting to the &lt;a href=&quot;https://github.com/imuxin/blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;repository&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="start" scheme="http://www.slicloud.com:38876/tags/start/"/>
    
  </entry>
  
</feed>
